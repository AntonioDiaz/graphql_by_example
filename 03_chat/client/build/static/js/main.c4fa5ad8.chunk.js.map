{"version":3,"sources":["auth.js","graphql/client.js","graphql/queries.js","MessageInput.js","MessageList.js","Chat.js","Login.js","NavBar.js","App.js","index.js"],"names":["loginUrl","getUserFromToken","token","jwtDecode","sub","getAccessToken","localStorage","getItem","getLoggedInUser","login","name","password","a","fetch","method","headers","body","JSON","stringify","response","ok","json","setItem","httpLink","ApolloLink","from","operation","forward","setContext","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","link","defaultOptions","query","fetchPolicy","messagesQuery","gql","addMessageMutation","addMessage","text","mutate","mutation","variables","input","data","message","getMessages","messages","MessageInput","event","key","this","props","onSend","target","value","className","type","placeholder","onKeyPress","handleKeyPress","bind","Component","MessageList","boxRef","React","createRef","box","current","scrollTo","scrollHeight","ref","style","height","overflowY","map","renderMessage","user","tag","id","paddingLeft","Chat","state","setState","concat","handleSend","Login","error","preventDefault","onLogin","onChange","handleChange","onClick","handleSubmit","NavBar","onLogout","App","removeItem","handleLogout","handleLogin","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4fa5ad8.chunk.js","sourcesContent":["import jwtDecode from 'jwt-decode';\n\nconst accessTokenKey = 'accessToken';\nconst loginUrl = 'http://localhost:9000/login';\n\nfunction getUserFromToken(token) {\n  return jwtDecode(token).sub;\n}\n\nexport function getAccessToken() {\n  return localStorage.getItem(accessTokenKey);\n}\n\nexport function getLoggedInUser() {\n  const token = getAccessToken();\n  if (!token) {\n    return null;\n  }\n  return getUserFromToken(token);\n}\n\nexport async function login(name, password) {\n  const response = await fetch(loginUrl, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({name, password})\n  });\n  if (!response.ok) {\n    return null;\n  }\n  const {token} = await response.json();\n  localStorage.setItem(accessTokenKey, token);\n  return getUserFromToken(token);\n}\n\nexport function logout() {\n  localStorage.removeItem(accessTokenKey);\n}\n","import {\n  ApolloClient, ApolloLink, HttpLink, InMemoryCache\n} from 'apollo-boost';\nimport { getAccessToken } from '../auth';\n\nconst httpUrl = 'http://localhost:9000/graphql';\n\nconst httpLink = ApolloLink.from([\n  new ApolloLink((operation, forward) => {\n    const token = getAccessToken();\n    if (token) {\n      operation.setContext({headers: {'authorization': `Bearer ${token}`}});\n    }\n    return forward(operation);\n  }),\n  new HttpLink({uri: httpUrl})\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: httpLink,\n  defaultOptions: {query: {fetchPolicy: 'no-cache'}}\n});\n\nexport default client;\n","import gql from 'graphql-tag';\nimport client from './client';\n\nconst messagesQuery = gql`\n  query MessagesQuery {\n    messages {\n      id\n      from\n      text\n    }\n  }\n`;\n\nconst addMessageMutation = gql`\n  mutation AddMessageMutation($input: MessageInput!) {\n    message: addMessage(input: $input) {\n      id\n      from\n      text\n    }\n  }\n`;\n\nexport async function addMessage(text) {\n  const {data} = await client.mutate({\n    mutation: addMessageMutation,\n    variables: {input: {text}}\n  });\n  return data.message;\n}\n\nexport async function getMessages() {\n  const {data} = await client.query({query: messagesQuery});\n  return data.messages;\n}\n","import React, { Component } from 'react';\n\nclass MessageInput extends Component {\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.props.onSend(event.target.value);\n      event.target.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"box\">\n        <p className=\"control\">\n          <input className=\"input\" type=\"text\" placeholder=\"Say something...\"\n            onKeyPress={this.handleKeyPress.bind(this)} />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default MessageInput;\n","import React, { Component } from 'react';\n\nclass MessageList extends Component {\n  boxRef = React.createRef();\n\n  componentDidUpdate() {\n    const box = this.boxRef.current;\n    // scroll to bottom to make the last message visible\n    box.scrollTo(0, box.scrollHeight);\n  }\n\n  render() {\n    const {messages} = this.props;\n    return (\n      <div ref={this.boxRef} className=\"box\" style={{height: '50vh', overflowY: 'scroll'}}>\n        <table>\n          <tbody>\n            {messages.map(this.renderMessage.bind(this))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  renderMessage(message) {\n    const {user} = this.props;\n    let tag = 'tag';\n    if (message.from === user) {\n      tag += ' is-primary';\n    }\n    return (\n      <tr key={message.id}>\n        <td><span className={tag}>{message.from}</span></td>\n        <td style={{paddingLeft: '0.75em'}}>{message.text}</td>\n      </tr>\n    )\n  }\n}\n\nexport default MessageList;\n","import React, { Component } from 'react';\nimport { addMessage, getMessages } from './graphql/queries';\nimport MessageInput from './MessageInput';\nimport MessageList from './MessageList';\n\nclass Chat extends Component {\n  state = {messages: []};\n\n  async componentDidMount() {\n    const messages = await getMessages();\n    this.setState({messages});\n  }\n\n  async handleSend(text) {\n    const message = await addMessage(text);\n    this.setState({messages: this.state.messages.concat(message)});\n  }\n\n  render() {\n    const {user} = this.props;\n    const {messages} = this.state;\n    return (\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">Chatting as {user}</h1>\n          <MessageList user={user} messages={messages} />\n          <MessageInput onSend={this.handleSend.bind(this)} />\n        </div>\n      </section>\n    );\n  }  \n}\n\nexport default Chat;\n","import React, { Component } from 'react';\nimport { login } from './auth';\n\nclass Login extends Component {\n  state = {name: '', password: '', error: false};\n\n  handleChange(event) {\n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {name, password} = this.state;\n    const user = await login(name, password);\n    if (user) {\n      this.props.onLogin(user);\n    } else {\n      this.setState({error: true});\n    }\n  }\n\n  render() {\n    const {name, password, error} = this.state;\n    return (\n      <div>\n        <section className=\"section\">\n          <div className=\"container\">\n            <h1 className=\"title\">Chat Login</h1>\n            <form>\n              <div className=\"field\">\n                <label className=\"label\">Name</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"text\" name=\"name\" value={name}\n                    onChange={this.handleChange.bind(this)} />\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">Password</label>\n                <div className=\"control\">\n                  <input className=\"input\" type=\"password\" name=\"password\" value={password}\n                    onChange={this.handleChange.bind(this)} />\n                </div>\n              </div>\n              <div className=\"field\">\n                {error &&\n                  <p className=\"help is-danger\">Invalid Credentials</p>\n                }                \n                <div className=\"control\">\n                  <button className=\"button is-link\"\n                    onClick={this.handleSubmit.bind(this)}>Login</button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\n\nclass NavBar extends Component {\n  render() {\n    const {onLogout} = this.props;\n    return (\n      <nav className=\"nabar\">\n        <div className=\"navbar-end\">\n          <button className=\"button navbar-item\"\n            onClick={onLogout}>Logout</button>\n        </div>\n      </nav>\n    );\n  }  \n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport { getLoggedInUser, logout } from './auth';\nimport Chat from './Chat';\nimport Login from './Login';\nimport NavBar from './NavBar';\n\nclass App extends Component {\n  state = {user: getLoggedInUser()};\n\n  handleLogin(user) {\n    this.setState({user});\n  }\n\n  handleLogout() {\n    logout();\n    this.setState({user: null});\n  }\n\n  render() {\n    const {user} = this.state;\n    if (!user) {\n      return <Login onLogin={this.handleLogin.bind(this)} />;\n    }\n    return (\n      <div>\n        <NavBar onLogout={this.handleLogout.bind(this)} />\n        <Chat user={user} />\n      </div>\n    );  \n  }\n}\n\nexport default App;\n","import 'bulma/css/bulma.css';\nimport './style.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}